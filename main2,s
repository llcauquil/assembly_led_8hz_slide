;****************** main.s ***************
; Program written by: ***Your Names**update this***
; Date Created: 2/14/2017
; Last Modified: 2/14/2017
; Brief description of the program
;   The LED toggles at 8 Hz and a varying duty-cycle
;   Repeat the functionality from Lab2-3 but now we want you to 
;   insert debugging instruments which gather data (state and timing)
;   to verify that the system is functioning as expected.
; Hardware connections (External: One button and one LED)
;  PE1 is Button input  (1 means pressed, 0 means not pressed)
;  PE0 is LED output (1 activates external LED on protoboard)
;  PF2 is Blue LED on Launchpad used as a heartbeat
; Instrumentation data to be gathered is as follows:
; After Button(PE1) press collect one state and time entry. 
; After Buttin(PE1) release, collect 7 state and
; time entries on each change in state of the LED(PE0): 
; An entry is one 8-bit entry in the Data Buffer and one 
; 32-bit entry in the Time Buffer
;  The Data Buffer entry (byte) content has:
;    Lower nibble is state of LED (PE0)
;    Higher nibble is state of Button (PE1)
;  The Time Buffer entry (32-bit) has:
;    24-bit value of the SysTick's Current register (NVIC_ST_CURRENT_R)
; Note: The size of both buffers is 50 entries. Once you fill these
;       entries you should stop collecting data
; The heartbeat is an indicator of the running of the program. 
; On each iteration of the main loop of your program toggle the 
; LED to indicate that your code(system) is live (not stuck or dead).

GPIO_PORTE_DATA_R  EQU 0x400243FC
GPIO_PORTE_DIR_R   EQU 0x40024400
GPIO_PORTE_AFSEL_R EQU 0x40024420
GPIO_PORTE_DEN_R   EQU 0x4002451C

GPIO_PORTF_DATA_R  EQU 0x400253FC
GPIO_PORTF_DIR_R   EQU 0x40025400
GPIO_PORTF_AFSEL_R EQU 0x40025420
GPIO_PORTF_PUR_R   EQU 0x40025510
GPIO_PORTF_DEN_R   EQU 0x4002551C
SYSCTL_RCGCGPIO_R  EQU 0x400FE608
NVIC_ST_CTRL_R      EQU 0xE000E010
NVIC_ST_RELOAD_R  EQU 0xE000E014
NVIC_ST_CURRENT_R  EQU 0xE000E018
PF4                  EQU 0x40025040
PE0                  EQU 0x40024004
PE1                  EQU 0x40024008

ONTIME EQU 0
OFFTIME EQU 4
NEXT EQU 8
; RAM Area
			AREA    DATA, ALIGN=2
DataBuffer 	SPACE 50
TimeBuffer 	SPACE 200 ;ARRAYS USED WITHIN PROGRAM
TimePt		SPACE 4
DataPt		SPACE 4
	
		
		
;-UUU-Declare  and allocate space for your Buffers 
;    and any variables (like pointers and counters) here

; ROM Area
       IMPORT TExaS_Init
;-UUU-Import routine(s) from other assembly files (like SysTick.s) here
       AREA    |.text|, CODE, READONLY, ALIGN=2
       THUMB
       EXPORT  Start
		   
U0 DCD 0, 5, U1
U1 DCD 1, 4, U2
U2 DCD 2, 3, U3
U3 DCD 3, 2, U4
U4 DCD 4, 1, U5
U5 DCD 5, 0, U0
	
	
	
	
SysTick_Init

; disable SysTick during setup

    LDR R1, =NVIC_ST_CTRL_R
    MOV R0, #0            ; Clear Enable        
    STR R0, [R1] 

; set reload to maximum reload value

    LDR R1, =NVIC_ST_RELOAD_R 
    LDR R0, =2000000;    ; Specify RELOAD value
    STR R0, [R1]            ; reload at maximum      

; writing any value to CURRENT clears it

    LDR R1, =NVIC_ST_CURRENT_R 
    MOV R0, #0              
    STR R0, [R1]            ; clear counter

; enable SysTick with core clock

    LDR R1, =NVIC_ST_CTRL_R    
    MOV R0, #0x0005    ; Enable but no interrupts (later)
    STR R0, [R1]      ; ENABLE and CLK_SRC bits set
    BX  LR 

;-----------------------------------------------------------------------------------------------------------------------------

;INITIALIZE THE DEBUG, SETS THE ARRAYS TO ZERO AND THEIR POINTERS
DEBUG_INIT
	LDR R0, =DataBuffer ;SETTINGS ARRAY DataBuffer and TimeBuffer to 0
	LDR R2, =TimeBuffer
	
	LDR R3, =TimePt ;SETS THE POINTERS TO ONE
	LDR R4, =DataPt
	
	MOV R1, #0XF
	STR R1, [R3]
	STR R1, [R4]
	
DATALOOP
	MOV R1, #0XFF
	STRB R1, [R0, R4]
	MOV R4, #4
	CMP R4, #50
	BEQ TIMELOOP
	B DATALOOP

TIMELOOP
	MOV R1, #-1
	STR R1, [R0, R3]
	MOV R3, #8
	CMP R4, #200
	BEQ NOLOOP
	B TIMELOOP

NOLOOP

	MOV R1, #0XF
	STR R1, [R3]
	STR R1, [R4]
	
	BL SysTick_Init

;---------------------------------------------------------------------------------------------------------------------------------
;SUBROUTINE FOR CAPTURING DATA FROM SYSTICK AND SYSTEM
DEBUG_CAPTURE 
	LDR R0, =DataBuffer
	LDR R2, =TimeBuffer
	LDR R3, =TimePt
	LDR R4, =DataPt
	
	CMP R4, #0
	BEQ BUFF_CLEAR
	BX LR
	
BUFF_CLEAR
	LDR R5, =PE1
	LDR R6, =SysTick
	
	
	
	STR R5, [R0, R4]; DUMP INTO DATABUFF
	MOV R4, #4
	
	
	STR R6, [R2, R3]; DUMP INTO TIMEBUFF
	MOV R3, #8
	
	
	BX LR





Start
 ; TExaS_Init sets bus clock at 80 MHz
      BL  TExaS_Init ; voltmeter, scope on PD3
      CPSIE  I    ; TExaS voltmeter, scope runs on interrupts
	  ;BL PLL_Init
    BL PortE_F_Initialization
    BL SysTick_Init

    LDR R5, =U1
	LDR R0, [R1, #ONTIME]
	LDR R2, =GPIO_PORTE_DATA_R
	MOV R4, #0
	
    
    ;LDR R5, =W2_5ms ;time LED is on during breathing
    ;LDR R6, =W10ms  ;time LED is off during breathing
    
    MOV R7, #0        ;R7 is a counter for the amount of duty cycles that passed during breathing
    MOV R8, #0         ;R8 is a reverse counter for the amount of duty cycles that passed during breathing
    MOV R10, #0        ;R10 is a trigger for when PF4 is pressed and unpressed 
	MOV R11, #0
loop
    
    BL Check_PF4 ;subroutine that checks for button at port pf4
    
    BL Button_Input
	PUSH {R1} ; pushing r1 after led on overwrites r1
    
    ;BL LED_On        ;On portion of blinking takes place here
	ORR R3, #0X01
	STR R3, [R2]
	LDR R0, [R5, #ONTIME]
	BL SysTick_Wait25ms
	POP {R1}
	PUSH {R1}
    ;BL LED_Off        ;Off portion of blinking takes place here
	BIC R3, #0X01
	STR R3, [R2]
	LDR R0, [R5, #OFFTIME]
	BL SysTick_Wait25ms
	POP {R1}
    B loop
;-------------------------------------------------------------------------------------------------------------------------------------------    
    

;------------SysTick_Wait------------
; Time delay using busy wait.
; Input: R0  delay parameter in units of the core clock (units of 12.5 nsec for 80 MHz clock)
; Output: none
; Modifies: R0, R1, R3
SysTick_Wait
    LDR  R1, =NVIC_ST_RELOAD_R      ; R1 = &NVIC_ST_RELOAD_R
    SUB  R0, #1
    STR  R0, [R1]                   ;delay-1;  // number of counts to wait
    LDR  R1, =NVIC_ST_CTRL_R        ; R1 = &NVIC_ST_CTRL_R
SysTick_Wait_loop
    LDR  R3, [R1]                   ; R3 = NVIC_ST_CTRL_R
    ANDS R3, R3, #0x00010000       ; Count set?
    BEQ  SysTick_Wait_loop
    BX   LR                         ; return

;------------SysTick_Wait10ms------------
; Time delay using busy wait.  This assumes 50 MHz clock
; Input: R0  number of times to wait 10 ms before returning
; Output: none
; Modifies: R0
DELAY25MS             EQU 2000000    ; clock cycles in 10 ms (assumes 80 MHz clock)
SysTick_Wait25ms
	CMP R0, #0
	BXEQ LR
	
    PUSH {R4, LR}                   ; save current value of R4 and LR
    MOVS R4, R0                     ; R4 = R0 = remainingWaits
    BEQ SysTick_Wait25ms_done       ; R4 == 0, done
SysTick_Wait25ms_loop
    LDR R0, =DELAY25MS              ; R0 = DELAY10MS
    BL  SysTick_Wait                ; wait 10 ms
    SUBS R4, R4, #1                 ; R4 = R4 - 1; remainingWaits--
    BHI SysTick_Wait25ms_loop       ; if(R4 > 0), wait another 10 ms
SysTick_Wait25ms_done
    POP {R4, LR}                    ; restore previous value of R4 and LR
    BX  LR                          ; return
    
;-------------------------------------------------------------------------------------------------------------------------------------------
Button_Input    
    
    LDR R3, [R2]     ; read just PE1
    AND R3, #0x02     ; just bit 1
    CMP R3, R4     ; check if switch is pressed
    BMI Switch_duty ;changes duty cycle during blinking
    
Switch_duty_return
	MOV R4, R3
    BX LR
;-------------------------------------------------------------------------------------------------------------------------------------------    
Switch_duty
    
    LDR R5, [R5, #NEXT] 

    B Switch_duty_return

;-------------------------------------------------------------------------------------------------------------------------------------------    
LED_On
      
    LDR R3, [R2]
    ORR R3, #0x01    ; turns on bit 0
    STR R3, [R2]     ; affects just PE0
    PUSH {LR}          
    LDR R0, [R1, #ONTIME]       ; sets on time for the blinking, this is the clock's reload value 
    BL SysTick_Wait25ms
    POP {LR}
    BX LR
	
;-------------------------------------------------------------------------------------------------------------------------------------------    
LED_Off
      
    LDR R3, [R2]
    BIC R3, #0x01    ; turns on bit 0
    STR R3, [R2]     ; affects just PE0
    PUSH {LR}          
    LDR R0, [R1, #OFFTIME]       ; sets on time for the blinking, this is the clock's reload value 
    BL SysTick_Wait25ms
    POP {LR}
    BX LR
    
    ;--------------------------------------------------------------------------------------------------------------------------------------------   
    
Check_PF4

    LDR R1, =PF4
    LDR R0, [R1]         ; read just PF4
    AND R0, #0x10         ; clears all bits except bit 4
    CMP R0, #0x10         ; checks if switch (PF4) is pressed
	;---------------------------------------------------------------------------------------------------------------------------------------------
	



      ALIGN      ; make sure the end of this section is aligned
      END        ; end of file

